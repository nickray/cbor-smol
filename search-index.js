var searchIndex = JSON.parse('{\
"cbor_smol":{"doc":"","t":[0,5,5,3,11,0,8,16,10,3,11,11,11,3,12,11,11,0,6,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,5,5,5,5,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["de","from_bytes","take_from_bytes","Deserializer","from_bytes","ser","Writer","Error","write_all","SliceWriter","new","bytes_written","into_inner","Serializer","writer","new","into_inner","error","Result","Error","WontImplement","NotYetImplemented","SerializeBufferFull","DeserializeUnexpectedEnd","DeserializeBadBool","DeserializeBadUtf8","DeserializeBadEnum","DeserializeBadMajor","DeserializeBadI8","DeserializeBadI16","DeserializeBadI32","DeserializeBadU8","DeserializeBadU16","DeserializeBadU32","DeserializeExpectedNull","InexistentSliceToArrayError","DeserializeNonMinimal","SerdeSerCustom","SerdeDeCustom","SerdeMissingField","Bytes","cbor_serialize","cbor_serialize_extending_bytes","cbor_serialize_bytes","cbor_deserialize","try_debug","try_error","try_info","try_trace","try_warn","log","debug","error","info","trace","warn","log_now","debug_now","error_now","info_now","trace_now","warn_now","try_log_now","try_debug_now","try_error_now","try_info_now","try_trace_now","try_warn_now","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","default","fmt","serialize","as_mut","clone","from","into_iter","eq","hash","deref","as_ref","partial_cmp","deserialize","deref_mut","write_all","fmt","fmt","fmt","eq","ne","clone","custom","custom","missing_field","new","from","into_inner","into_vec","as_slice","as_mut_slice","try_convert_into","from_slice","try_from","insert_slice_at","insert","remove","resize_default","resize_to_capacity","to_bytes"],"q":["cbor_smol","cbor_smol::de","","","","cbor_smol","cbor_smol::ser","","","","","","","","","","","cbor_smol","cbor_smol::error","","","","","","","","","","","","","","","","","","","","","","cbor_smol","","","","","","","","","","","","","","","","","","","","","","","","","","","","cbor_smol::de","","","","","","","cbor_smol::ser","","","","","","","","","","","","","","cbor_smol::error","","","","","","","cbor_smol","","","","","","","","","","","","","","","","","","","","","cbor_smol::ser","","cbor_smol::error","","","","","","","","cbor_smol","","","","","","","","","","","","","",""],"d":["","Deserialize a message of type <code>T</code> from a byte slice. The …","Deserialize a message of type <code>T</code> from a byte slice. The …","A structure for deserializing a cbor-smol message.","Obtain a Deserializer from a slice of bytes","","","The type of error returned when a write operation fails.","Attempts to write an entire buffer into this write.","","Wraps a mutable slice so it can be used as a <code>Writer</code>.","Returns the number of bytes written to the underlying …","Returns the underlying slice.","","","","Unwrap the <code>Writer</code> from the <code>Serializer</code>.","","This is the Result type used by cbor-smol.","This is the error type used by cbor-smol","This is a feature that cbor-smol will never implement","This is a feature that cbor-smol intends to support, but …","The serialize buffer is full","Hit the end of buffer, expected more data","Found a bool that wasn’t 0xf4 or 0xf5","Tried to parse invalid utf-8","Could not parse an enum","Expected a different major type","Expected a i8, was too large","Expected a i16, was too large","Expected a i32, was too large","Expected a u8","Expected a u16","Expected a u32","Expected a NULL marker","Inexistent slice-to-array cast error. Used here to avoid …","Value may be valid, but not encoded in minimal way","Serde Serialization Error","Serde Deserialization Error","Serde Missing required value","","","Append serialization of object to existing bytes, …","Serialize object into newly allocated Bytes.","","Fallible version of <code>debug!</code>.","Fallible version of <code>error!</code>.","Fallible version of <code>info!</code>.","Fallible version of <code>trace!</code>.","Fallible version of <code>warn!</code>.","Local version of <code>log!</code>.","Local version of <code>debug!</code>.","Local version of <code>error!</code>.","Local version of <code>info!</code>.","Local version of <code>trace!</code>.","Local version of <code>warn!</code>.","Immediate version of <code>log!</code>.","Immediate version of <code>debug!</code>.","Immediate version of <code>error!</code>.","Immediate version of <code>info!</code>.","Immediate version of <code>trace!</code>.","Immediate version of <code>warn!</code>.","Fallible immediate version of <code>log!</code>.","Fallible immediate version of <code>debug!</code>.","Fallible immediate version of <code>error!</code>.","Fallible immediate version of <code>info!</code>.","Fallible immediate version of <code>trace!</code>.","Fallible immediate version of <code>warn!</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Construct a new, empty <code>Bytes<N></code>.","Wrap existing bytes in a <code>Bytes<N></code>.","Unwraps the Vec<u8, N>, same as <code>into_vec</code>.","Unwraps the Vec<u8, N>, same as <code>into_inner</code>.","Returns an immutable slice view.","Returns a mutable slice view.","Low-noise conversion between lengths.","","Some APIs offer an interface of the form …","","","","","","Fallible conversion into differently sized byte buffer."],"i":[0,0,0,0,1,0,0,2,2,0,3,3,3,0,4,4,4,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,3,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],"f":[null,[[],["result",6]],[[],["result",6]],null,[[]],null,null,null,[[],["result",4]],null,[[],["slicewriter",3]],[[],["usize",15]],[[]],null,null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",6]],[[["bytes",3]],[["usize",15],["result",6]]],[[],[["result",6],["bytes",3]]],[[],[["deserialize",8],["result",6]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bytes",3]],[[["formatter",3]],[["result",4],["error",3]]],[[],["result",4]],[[]],[[],["bytes",3]],[[["vec",3],["u8",15]],["bytes",3]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[],[["option",4],["ordering",4]]],[[],[["bytes",3],["result",4]]],[[]],[[],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["error",4]],["bool",15]],[[["error",4]],["bool",15]],[[],["error",4]],[[]],[[]],[[["str",15]]],[[],["bytes",3]],[[],["bytes",3]],[[],[["vec",3],["u8",15]]],[[],[["vec",3],["u8",15]]],[[]],[[]],[[],[["result",4],["bytes",3]]],[[],[["bytes",3],["result",4]]],[[],[["result",4],["bytes",3]]],[[["usize",15]],["result",4]],[[["usize",15],["u8",15]],[["u8",15],["result",4]]],[[["usize",15]],[["result",4],["u8",15]]],[[["usize",15]],["result",4]],[[]],[[],[["result",4],["bytes",3]]]],"p":[[3,"Deserializer"],[8,"Writer"],[3,"SliceWriter"],[3,"Serializer"],[4,"Error"],[3,"Bytes"]]}\
}');
initSearch(searchIndex);